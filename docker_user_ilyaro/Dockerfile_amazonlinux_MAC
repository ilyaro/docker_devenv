FROM amazonlinux:2023
# Maintainer information
LABEL maintainer="Ilya Rokhkin"

# Update system and install common tools

# Update system first
RUN dnf update -y && dnf clean all

# Try installing epel-release without the config-manager or crb
RUN dnf install -y epel-release || echo "EPEL Release failed" && dnf clean all

## Update the package index
RUN dnf update -y && dnf clean all

#
## Install individual packages
#RUN dnf install -y crash
#RUN dnf install -y ltrace
#RUN dnf install -y systemtap
#RUN dnf install -y perf
#RUN dnf install -y bc
#RUN dnf install -y blktrace
#RUN dnf install -y hwloc
#RUN dnf install -y iotop
#RUN dnf install -y pciutils
#RUN dnf install -y mailx
#RUN dnf install -y man-db
#RUN dnf install -y net-tools
#RUN dnf install -y numactl
#RUN dnf install -y passwd
#RUN dnf install -y psmisc
#RUN dnf install -y screen
#RUN dnf install -y sysstat
#RUN dnf install -y traceroute
#RUN dnf install -y lynx
RUN dnf install -y unzip
RUN dnf install -y zip
#RUN dnf install -y tmux
#RUN dnf install -y bind-utils
RUN dnf install -y jq
RUN dnf install -y tar
## Clean up after installation
#RUN dnf clean all
#
# Install Python3 and pip
RUN dnf install -y python3-pip

# Upgrade pip and install Python modules
RUN python3 -m ensurepip --upgrade --verbose && \
    python3 -m pip install --upgrade --ignore-installed pip --verbose

RUN python3 -m pip install pyyaml redis

# Install AWS CLI
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
gunzip awscliv2.zip && ./aws/install && rm -f awscliv2.zip

# Install Terraform
RUN curl -fsSL https://raw.githubusercontent.com/hashicorp/setup-terraform/main/setup.sh | bash

#RUN curl https://releases.hashicorp.com/terraform/1.0.8/terraform_1.0.8_linux_amd64.zip && \
#    unzip terraform_1.0.8_linux_amd64.zip -d /usr/local/bin/ && \
#    rm terraform_1.0.8_linux_amd64.zip

# Install Go
# Determine architecture and install the latest version of Go
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "x86_64" ]; then \
        GO_VERSION=$(curl -s https://go.dev/dl/?mode=json | jq -r '.[0].version') && \
        curl -s https://dl.google.com/go/$GO_VERSION.linux-amd64.tar.gz -o go.tar.gz; \
    elif [ "$ARCH" = "aarch64" ]; then \
        GO_VERSION=$(curl -s https://go.dev/dl/?mode=json | jq -r '.[0].version') && \
        curl -s https://dl.google.com/go/$GO_VERSION.linux-arm64.tar.gz -o go.tar.gz; \
    else \
        echo "Unsupported architecture: $ARCH"; \
        exit 1; \
    fi && \
    tar -C /usr/local -xzf go.tar.gz && \
    rm go.tar.gz

# Set Go environment variables
ENV PATH="/usr/local/go/bin:${PATH}"

#RUN wget https://golang.org/dl/go1.17.2.linux-amd64.tar.gz && \
#    tar -C /usr/local -xzf go1.17.2.linux-amd64.tar.gz && \
#    rm go1.17.2.linux-amd64.tar.gz

# Install Kubectl
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && rm -f kubectl

# Install Helm
RUN curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

# Clean up to reduce image size
RUN dnf clean all && rm -rf /var/cache/dnf

USER root

# Default entrypoint
ENTRYPOINT [ "/bin/bash" ]
