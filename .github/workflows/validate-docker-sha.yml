name: Validate Docker Hub SHA256

on:
  schedule:
    - cron: '0 0 * * 0' # Runs every Sunday at midnight UTC
  workflow_dispatch:

jobs:
  validate-sha:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: gfish/devenv_amazonlinux_2023
    steps:
      - name: Get latest release info
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            if (releases.data.length === 0) throw new Error('No releases found');
            const release = releases.data[0];
            const tag = release.tag_name;
            // Parse the release body to find both AMD64 and ARM64 SHA256 values
            // Example format in release:
            // Docker Images:
            // AMD64: sha256:009496b08ae91c54bf6a2a8b9f70dd8ce20e05a782d1d606c20ba41a5204c406
            // ARM64: sha256:fbef5807566cb8daff39753700f266beb35c1ca9013adcce70d7489d8ed54319
            const amdMatch = release.body.match(/AMD64:\s*sha256:([a-fA-F0-9]{64})/);
            const armMatch = release.body.match(/ARM64:\s*sha256:([a-fA-F0-9]{64})/);
            
            if (!amdMatch) throw new Error('AMD64 sha256 not found in release body');
            if (!armMatch) throw new Error('ARM64 sha256 not found in release body');
            
            return { 
              tag, 
              amd_sha256: amdMatch[1], 
              arm_sha256: armMatch[1] 
            };

      - name: Get SHA256 for AMD64 and ARM64 from Docker Hub
        id: get_docker_sha
        run: |
          TAG="${{fromJson(steps.get_release.outputs.result).tag}}"
          REPO="$DOCKER_REPO"
          # Get the full tag info from Docker Hub API
          RESPONSE=$(curl -s -H "Accept: application/json" \
            "https://hub.docker.com/v2/repositories/${REPO}/tags/${TAG}")
          
          # Extract SHA256 for AMD64 and ARM64 using jq
          AMD_SHA=$(echo "$RESPONSE" | jq -r '.images[] | select(.architecture=="amd64") | .digest | split(":")[1]')
          ARM_SHA=$(echo "$RESPONSE" | jq -r '.images[] | select(.architecture=="arm64") | .digest | split(":")[1]')
          
          # Validate both SHAs were found
          if [ -z "$AMD_SHA" ]; then
            echo "Error: Could not find AMD64 SHA in Docker Hub response"
            exit 1
          fi
          if [ -z "$ARM_SHA" ]; then
            echo "Error: Could not find ARM64 SHA in Docker Hub response"
            exit 1
          fi
          
          echo "amd_sha=$AMD_SHA" >> $GITHUB_OUTPUT
          echo "arm_sha=$ARM_SHA" >> $GITHUB_OUTPUT

      - name: Validate SHA256
        id: validate_sha
        run: |
          RELEASE_AMD_SHA="${{fromJson(steps.get_release.outputs.result).amd_sha256}}"
          RELEASE_ARM_SHA="${{fromJson(steps.get_release.outputs.result).arm_sha256}}"
          AMD_SHA="${{steps.get_docker_sha.outputs.amd_sha}}"
          ARM_SHA="${{steps.get_docker_sha.outputs.arm_sha}}"
          echo "Release amd64 sha256: $RELEASE_AMD_SHA"
          echo "Release arm64 sha256: $RELEASE_ARM_SHA"
          echo "Docker Hub AMD64 sha256: $AMD_SHA"
          echo "Docker Hub ARM64 sha256: $ARM_SHA"
          if [ "$RELEASE_AMD_SHA" != "$AMD_SHA" ]; then
            echo "ERROR: SHA256 value does not match for AMD64"
            exit 1
          fi
          if [ "$RELEASE_ARM_SHA" != "$ARM_SHA" ]; then
            echo "ERROR: SHA256 value does not match for ARM64"
            exit 1
          fi
          echo "SHA256 values match for both AMD64 and ARM64."
