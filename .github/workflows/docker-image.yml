name: Docker Image CI

on:
  push:
    tags: 
      - 'v*'  # This will trigger the workflow for any tag that starts with v

jobs:
  build:
    runs-on: ubuntu-latest  # Lightweight OS for Docker builds
    env:
      DOCKER_IMAGE: gfish/devenv_amazonlinux_2023

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-
       
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./Dockerfiles
          file: ./Dockerfiles/Dockerfile_amazonlinux_2023 # Specify your custom Dockerfile name
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
            ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64  # Specify target platforms
          provenance: mode=max  # Enable SLSA provenance
          sbom: true       # Generate Software Bill of Materials
          # Remove push-by-digest to allow normal tag pushing
          outputs: type=image,name=${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}

      - name: Output Image Digests
        run: |
          # Get all metadata from build
          echo "Image digest: ${{ steps.build.outputs.digest }}"
          echo "IMAGE_DIGEST=${{ steps.build.outputs.digest }}" >> $GITHUB_ENV
          
          # Get platform-specific digests from build outputs
          echo "AMD64 digest: ${{ steps.build.outputs.digest-amd64 }}"
          echo "ARM64 digest: ${{ steps.build.outputs.digest-arm64 }}"
          
          # Store platform-specific SHAs in environment variables
          echo "SHA_AMD64=${{ steps.build.outputs.digest-amd64 }}" >> $GITHUB_ENV
          echo "SHA_ARM64=${{ steps.build.outputs.digest-arm64 }}" >> $GITHUB_ENV
          
          # Create full image references with digests
          echo "AMD64_IMAGE=${{ env.DOCKER_IMAGE }}@${{ steps.build.outputs.digest-amd64 }}" >> $GITHUB_ENV
          echo "ARM64_IMAGE=${{ env.DOCKER_IMAGE }}@${{ steps.build.outputs.digest-arm64 }}" >> $GITHUB_ENV

      # Test all DevOps tools in the built image before vulnerability scanning
      - name: Test DevOps Tools in Docker Image
        run: |
          TEST_SCRIPT="./Scripts/test-devops-tools.sh"
          # Verify the test script exists before running
          if [ ! -f "$TEST_SCRIPT" ]; then
            echo "Error: test-devops-tools.sh not found in workspace"
            exit 1
          fi
          
          # Make sure test script is executable
          chmod +x $TEST_SCRIPT

          # Copy test script into container and run it
          docker run --rm --entrypoint /bin/bash \
            -v ${{ github.workspace }}:/tmp \
            ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }} \
            -c "cd /tmp/Scripts && ./test-devops-tools.sh"

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
          format: 'table'
          severity: 'HIGH,CRITICAL'

      - name: Get latest Amazon Linux 2023 tag update timestamp
        id: get_timestamp
        run: |
          response=$(curl -s "https://hub.docker.com/v2/repositories/library/amazonlinux/tags/2023")
          timestamp=$(echo "$response" | jq -r '.last_updated')
          epoch_timestamp=$(date -d "$timestamp" +%s)
          echo "Latest epoch timestamp: $epoch_timestamp timestamp: $timestamp"
          echo "epoch_timestamp=al2023-$epoch_timestamp" >> $GITHUB_ENV

      - name: Create Git tag with Image Information
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          ## Create Tag of latest AL_2023 tag timestamp
          git tag -f "$epoch_timestamp"
          # Create an annotated tag with all image information
          git tag -a "${{ github.ref_name }}-SBOM" -m "Docker Image Information:
          AMD64 Image: ${{ env.AMD64_IMAGE }}
          ARM64 Image: ${{ env.ARM64_IMAGE }}
          
          SHA256 Digests:
          AMD64: ${{ env.SHA_AMD64 }}
          ARM64: ${{ env.SHA_ARM64 }}
          Manifest: ${{ env.IMAGE_DIGEST }}"
          
          git push origin "$epoch_timestamp" -f
          git push origin "${{ github.ref_name }}-SBOM" -f  
