name: Docker Image CI

on:
  push:
    tags: 
      - 'v*'  # This will trigger the workflow for any tag that starts with v

jobs:
  build:
    runs-on: ubuntu-latest  # Lightweight OS for Docker builds

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
       
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./Dockerfiles
          file: ./Dockerfiles/Dockerfile_amazonlinux_2023 # Specify your custom Dockerfile name
          push: true
          tags: gfish/devenv_amazonlinux_2023:${{ github.ref_name }}  # Use the tag that was pushed
          platforms: linux/amd64,linux/arm64  # Specify target platforms
          provenance: true  # Enable SLSA provenance
          sbom: true       # Generate Software Bill of Materials
          outputs: type=image,name=gfish/devenv_amazonlinux_2023:${{ github.ref_name }},push-by-digest=true
          # This will output the digests before pushing the final tag

      - name: Output Image Digest
        run: |
          echo "Image digest: ${{ steps.build.outputs.digest }}"
          echo "IMAGE_DIGEST=${{ steps.build.outputs.digest }}" >> $GITHUB_ENV

      # Test all DevOps tools in the built image before vulnerability scanning
      - name: Test DevOps Tools in Docker Image
        run: |
          TEST_SCRIPT="./Scripts/test-devops-tools.sh"
          # Verify the test script exists before running
          if [ ! -f "$TEST_SCRIPT" ]; then
            echo "Error: test-devops-tools.sh not found in workspace"
            exit 1
          fi
          
          # Make sure test script is executable
          chmod +x $TEST_SCRIPT

          # Copy test script into container and run it
          docker run --rm --entrypoint /bin/bash \
            -v ${{ github.workspace }}:/tmp \
            $image_tag \
            -c "cd /tmp/Scripts && ./test-devops-tools.sh"

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: gfish/devenv_amazonlinux_2023:${{ github.ref_name }}
          format: 'table'
          severity: 'HIGH,CRITICAL'

      - name: Get latest Amazon Linux 2023 tag update timestamp
        id: get_timestamp
        run: |
          response=$(curl -s "https://hub.docker.com/v2/repositories/library/amazonlinux/tags/2023")
          timestamp=$(echo "$response" | jq -r '.last_updated')
          epoch_timestamp=$(date -d "$timestamp" +%s)
          echo "Latest epoch timestamp: $epoch_timestamp timestamp: $timestamp"
          echo "epoch_timestamp=al2023-$epoch_timestamp" >> $GITHUB_ENV

      - name: Create Git tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$epoch_timestamp"
          git push origin "$epoch_timestamp" -f
