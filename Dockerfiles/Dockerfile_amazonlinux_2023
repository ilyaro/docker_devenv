FROM amazonlinux:2023

# Maintainer information
LABEL maintainer="Ilya Rokhkin"

ARG TARGETPLATFORM ## Get platform linux/amd64 linux/arm64

# Update system and install EPEL repository
RUN dnf update -y && \
    dnf install -y epel-release || echo "EPEL Release failed" && \
    dnf clean all

# Install all system packages, development tools, and DevOps tools in a single layer
RUN dnf install -y \
        bash-completion \
        bc \
        blktrace \
        crash \
        e2fsprogs \
        ethtool \
        file \
        findutils \
        gcc \
        gcc-c++ \
        gdb \
        gdb-gdbserver \
        git \
        glibc-common \
        glibc-utils \
        golang \
        hwloc \
        iotop \
        iproute \
        iputils \
        less \
        ltrace \
        mailx \
        man-db \
        nc \
        net-tools \
        numactl \
        numactl-devel \
        ostree \
        passwd \
        pciutils \
        perf \
        procps-ng \
        psmisc \
        python3-pip \
        rootfiles \
        screen \
        strace \
        sudo \
        sysstat \
        systemtap \
        systemtap-client \
        tar \
        tcpdump \
        tmux \
        traceroute \
        unzip \
        vim-enhanced \
        vim-minimal \
        wget \
        which \
        xauth \
        yum-utils \
        dos2unix \
        jq \
        htop \
        tree \
        hostname \
        bind-utils \
        ca-certificates \
        nano \
        vim \
        make \
        openssl-devel \
        python3-devel \
        libffi-devel \
        nodejs \
        awscli \
        docker \
        docker-selinux \
        zsh \
        # Install certificates and update certificate store for Amazon Linux 2023
        ca-certificates && \ 
    update-ca-trust extract && \
    # Create symlinks for common certificate paths if they don't exist
    mkdir -p /etc/pki/tls/certs /etc/ssl/certs && \
    # Link the system CA bundle to common locations
    ln -sf /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem /etc/pki/tls/certs/ca-bundle.crt && \
    ln -sf /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem /etc/ssl/certs/ca-certificates.crt && \    
    # Clean up package cache to reduce image size
    dnf clean all && \
    rm -rf /var/cache/dnf

# Upgrade pip and install Python modules
RUN python3 -m ensurepip --upgrade --verbose && \
    python3 -m pip install --upgrade --ignore-installed pip --verbose

RUN python3 -m pip install pyyaml redis
RUN python3 -m pip install aws-sso-util awsume
RUN python3 -m pip install git-remote-codecommit

# Install Homebrew
RUN git clone https://github.com/Homebrew/brew /usr/local/bin/Homebrew \
&& ln -s /usr/local/bin/Homebrew/bin/brew /usr/local/bin \
&& eval brew shellenv \
&& brew --version

# Set environment variables for pyenv
ENV PYENV_ROOT="/usr/local/pyenv"
ENV PATH="$PYENV_ROOT/bin:$PYENV_ROOT/shims:$PATH"

# Install pyenv
RUN curl https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash \
    && chmod -R 777 $PYENV_ROOT

# Ensure pyenv is available system-wide
RUN echo 'export PYENV_ROOT="/usr/local/pyenv"' >> /etc/profile.d/pyenv.sh \
    && echo 'export PATH="$PYENV_ROOT/bin:$PYENV_ROOT/shims:$PATH"' >> /etc/profile.d/pyenv.sh \
    && chmod +x /etc/profile.d/pyenv.sh

# Verify pyenv installation
RUN pyenv versions

# Install Terraform with repository configuration
RUN yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo && \
    dnf install -y terraform && \
    dnf clean all

# Set Go environment variables
ENV PATH="/usr/local/go/bin:${PATH}"

RUN go install github.com/mikefarah/yq/v4@latest

# Install Kubectl with repository configuration
RUN KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt) && \
    BASE_VERSION=$(echo $KUBECTL_VERSION | awk -F. '{print $1"."$2}') && \
    echo "[kubernetes]" | tee /etc/yum.repos.d/kubernetes.repo && \
    echo "name=Kubernetes" | tee -a /etc/yum.repos.d/kubernetes.repo && \
    echo "baseurl=https://pkgs.k8s.io/core:/stable:/${BASE_VERSION}/rpm/" | tee -a /etc/yum.repos.d/kubernetes.repo && \
    echo "enabled=1" | tee -a /etc/yum.repos.d/kubernetes.repo && \
    echo "gpgcheck=1" | tee -a /etc/yum.repos.d/kubernetes.repo && \
    echo "gpgkey=https://pkgs.k8s.io/core:/stable:/${BASE_VERSION}/rpm/repodata/repomd.xml.key" | tee -a /etc/yum.repos.d/kubernetes.repo

RUN cat /etc/yum.repos.d/kubernetes.repo

# Install kubectl using the defined version
RUN dnf install -y kubectl && \
    dnf clean all

# Install Helm
# Download and install the latest Helm version
RUN export VERIFY_CHECKSUM=false && curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && \
    chmod +x get_helm.sh && \
    ./get_helm.sh && \
    rm get_helm.sh

# Install Azure CLI
RUN python3 -m pip install azure-cli

# Get latest version from GitHub API
RUN VERSION=$(curl -s https://api.github.com/repos/helmfile/helmfile/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | sed 's/^v//') &&\
    ARCH=$(echo ${TARGETPLATFORM} | sed 's/\//_/g') && \
    curl -LO "https://github.com/helmfile/helmfile/releases/download/v${VERSION}/helmfile_${VERSION}_${ARCH}.tar.gz" &&\
    tar -xzf "helmfile_${VERSION}_${ARCH}.tar.gz" && \
    chmod +x helmfile && \
    mv helmfile /usr/local/bin/

# Install eksctl
RUN EKSCTL_LATEST_VERSION=$(curl --silent "https://api.github.com/repositories/134539560/releases/latest" | jq -r .tag_name) && ARCH=$(echo ${TARGETPLATFORM} | awk -F\/ '{print $2}') && curl -Lo eksctl_Linux_${ARCH}.tar.gz https://github.com/eksctl-io/eksctl/releases/download/${EKSCTL_LATEST_VERSION}/eksctl_Linux_${ARCH}.tar.gz && tar -xzf eksctl_Linux_${ARCH}.tar.gz && rm eksctl_Linux_${ARCH}.tar.gz && mv eksctl /usr/local/bin && chmod +x /usr/local/bin/eksctl

RUN TERRAGRUNT_VERSION=$(curl -s https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | grep 'tag_name' | cut -d\" -f4 | tr -d '\n') && \
    ARCH=$(echo ${TARGETPLATFORM} | sed 's/\//_/g') && \
    echo "Terragrunt version: ${TERRAGRUNT_VERSION}" && \
    echo "Architecture: ${ARCH}" && \
    curl -L "https://github.com/gruntwork-io/terragrunt/releases/download/${TERRAGRUNT_VERSION}/terragrunt_${ARCH}" -o /usr/local/bin/terragrunt && \
    chmod +x /usr/local/bin/terragrunt


USER root

# Default entrypoint
ENTRYPOINT [ "/bin/zsh" ]
